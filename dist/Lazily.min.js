const Lazily=function(n){const e="lazily",t="IntersectionObserver"in window&&"MutationObserver"in window,i=t?new MutationObserver(function(n){n.forEach(function(n){[].slice.call(n.addedNodes).forEach(function(n){n instanceof Element&&function(n){if(initializedKey in n.dataset)return;n.dataset[e]="",r.forEach(function(e){e(n)})}(n)})})}):n,o=(t&&new IntersectionObserver(function(n,e){n.forEach(function(n){if(n.isIntersecting){const e=n.target,t=o.get(e);t&&t.forEach(function(n){n(e)})}})}),new Map),r=[];return t&&i.observe(document.documentElement,{childList:!0,subtree:!0}),{onMutation:function(n){if("function"!=typeof n)throw new Error("Please provide a valid handler function");return r.push(n),this},observeIntersection:function(n,e){if(!(n instanceof Element))return this;if("function"!=typeof e)throw new Error("Please provide a valid handler function");return o.has(n)||o.set(n,[]),o.get(n).push(e),this},unobserveIntersection:function(n,e){if(o.has(n)){const t=o.get(n),i=t.indexOf(e);-1!=i&&t.splice(i,1)}return this}}}();